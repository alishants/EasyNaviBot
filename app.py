from flask import Flask, render_template
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import multiprocessing
import asyncio
from urllib.parse import quote

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

@app.route("/")
def home():
    return render_template("index.html")  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤ –ø–∞–ø–∫–µ templates

# Telegram-–±–æ—Ç
TOKEN = "8197947754:AAG0EtbpnqKGU3w0P7Sy_3AA4wko1Ps-ZL4"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç. üåç –ù–∞–ø–∏—à–∏ –º–Ω–µ –∞–¥—Ä–µ—Å, –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –µ–≥–æ –Ω–∞ Google Maps! üó∫Ô∏è\n\n"
        "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "üìç –ê–¥—Ä–µ—Å: 1600 Amphitheatre Parkway\n"
        "üèôÔ∏è –ú–µ—Å—Ç–æ: –≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è\n"
        "üöá –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: Diagonal\n"
        "–ü–æ–ø—Ä–æ–±—É–π! üòâ"
    )
    await update.message.reply_text(welcome_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {query}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL
        encoded_query = quote(query)

        # –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL
        is_address = any(char.isdigit() for char in query)
        is_street = any(word in query.lower() for word in ["street", "avenue", "road", "boulevard", "drive", "lane", "carrer", "calle"])
        is_metro = any(word in query.lower() for word in ["station", "metro", "underground", "subway", "diagonal", "sagrera", "verdaguer"])
        is_place = any(word in query.lower() for word in ["plaza", "square", "park", "area"])

        if is_address or is_metro:
            google_maps_url = f"https://www.google.com/maps/dir/?api=1&destination={encoded_query}"
            response = f"üìç –ê–¥—Ä–µ—Å/–º–µ—Ç—Ä–æ –Ω–∞–π–¥–µ–Ω–æ!\nüåç –ö–∞—Ä—Ç—ã: {google_maps_url}"
        elif is_street or is_place:
            google_maps_url = f"https://www.google.com/maps/search/{encoded_query}"
            response = f"üèôÔ∏è –£–ª–∏—Ü–∞/–º–µ—Å—Ç–æ –Ω–∞–π–¥–µ–Ω–æ!\nüåç –ö–∞—Ä—Ç—ã: {google_maps_url}"
        else:
            google_maps_url = f"https://www.google.com/maps/search/{encoded_query}+near+me"
            response = f"üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Å—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\nüåç –ö–∞—Ä—Ç—ã: {google_maps_url}"

        await update.message.reply_text(response)

    except Exception as e:
        error_message = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        await update.message.reply_text(error_message)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
def start_bot():
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    asyncio.set_event_loop(asyncio.new_event_loop())
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è Telegram-–±–æ—Ç–∞
    bot_process = multiprocessing.Process(target=start_bot)
    bot_process.start()

    # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host="0.0.0.0", port=5000)

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ Telegram-–±–æ—Ç–∞
    bot_process.join()
